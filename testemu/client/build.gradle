buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath "com.adva:netemu:0.1.0-SNAPSHOT"
    }
}

plugins {
    id 'application'
    id 'java'
    id 'maven'
}

apply plugin: 'java'
apply plugin: 'maven'

group = "com.adva.netemu"
version = "0.1.0-SNAPSHOT"

application {
    mainClassName = "com.adva.netemu.testemu.client.Main"
}

sourceCompatibility = 11
targetCompatibility = 11

apply plugin: "com.adva.netemu"

netEmu {
    yangToSources {
        // outputDir = "build"
        // generateIn "build"
    }

    definesContextInPackage "com.adva.netemu.testemu.client"

    pythonizer {
        appendsYangModelsToFile "testemu_client/yang_models.py"
    }
}

sourceSets {
    main.java.srcDirs += "$buildDir/$netEmu.yangToSources.outputDir"
}

ext.jepDir = [
        "python", "-c", "print(__import__('os').path.dirname(__import__('importlib.util').util.find_spec('jep').origin))"

].execute().text.trim()

repositories {
    mavenCentral()
    mavenLocal()

    flatDir {
        dirs jepDir
    }
}

dependencies {
    implementation "com.adva:netemu:0.1.0-SNAPSHOT"
    annotationProcessor "com.adva:netemu:0.1.0-SNAPSHOT"

    implementation "com.adva.netemu:netemu-testemu:0.1.0-SNAPSHOT"

    // testImplementation group: 'junit', name: 'junit', version: '4.12'
}

run {
    environment "PATH", String.join(File.pathSeparator, [

            /*
            "C:\\Miniconda3\\envs\\netemu",
            "C:\\Miniconda3\\envs\\netemu\\Library\\mingw-w64\\bin",
            "C:\\Miniconda3\\envs\\netemu\\Library\\usr\\bin",
            "C:\\Miniconda3\\envs\\netemu\\Library\\bin",
            "C:\\Miniconda3\\envs\\netemu\\Scripts",
            */

            jepDir,
            System.getenv('PATH')])

    environment "PYTHONPATH", [
            "python", "-c", "print(__import__('os').pathsep.join(__import__('sys').path).strip(__import__('os').pathsep))"

    ].execute().text.trim()
}

jar {
    manifest {
        attributes 'Main-Class': "com.adva.netemu.testemu.client.Main"
    }
}

task('uberJar', type: Jar) {
    with jar
    archiveClassifier.set 'uber'

    manifest {
        attributes 'Main-Class': "com.adva.netemu.testemu.client.Main"
    }

    /*  The following extended archive creation is adapted from
        https://github.com/gradle/gradle/blob/31c1c031de1643402032e1a51f835c2055d0afb5
                /subprojects/docs/src/samples/userguide/files/archivesWithJavaPlugin/kotlin/build.gradle.kts
    */

    dependsOn configurations.runtimeClasspath
    from { configurations.runtimeClasspath.filter { File file -> file.name.endsWith ".jar" }.collect { zipTree it }
    }
}
