buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath "com.adva:netemu:0.1.0-SNAPSHOT"
    }
}

plugins {
    id 'application'
    id 'groovy'
    id 'java'
}

apply plugin: 'application'
apply plugin: 'groovy'
apply plugin: 'java'


group = "com.adva.netemu.example"
version = "0.1.0-SNAPSHOT"

application {
    mainClassName = "com.adva.netemu.example.jukebox.Main"
}

sourceCompatibility = 17
targetCompatibility = 17


apply plugin: "com.adva.netemu"

netEmu {
    yangToSources {
        // outputDir = "build"
        // generateIn "build"
    }

    // definesContextInPackage "com.adva.netemu.example.jukebox"

    /*
    pythonizer {
        appendsYangModelsToFile "emu_jukebox/yang_models.py"
    }
    */
}

sourceSets {
    main.java.srcDirs += [
            "${buildDir}/${netEmu.yangToSources.mdSalOutputDir}",
            "${buildDir}/${netEmu.yangToSources.netEmuOutputDir}",
    ]
}

/*
ext.jepDir = [
        "c:\\tools\\miniconda3\\envs\\yang\\python", "-c", "print(__import__('os').path.dirname(__import__('importlib.util').util.find_spec('jep').origin))"

].execute().text.trim()
*/


repositories {
    mavenLocal()
    mavenCentral()

    /*
    flatDir {
        dirs jepDir
    }
    */
}

dependencies {
    gradleApi()
    // localGroovy()
    implementation "org.apache.groovy:groovy:4.0.10"

    implementation "com.adva:netemu:0.1.0-SNAPSHOT"
    annotationProcessor "com.adva:netemu:0.1.0-SNAPSHOT"

    implementation "io.jooby:jooby-netty:3.0.0.M4"
    annotationProcessor 'io.jooby:jooby-apt:3.0.0.M4'

    implementation "se.michaelthelin.spotify:spotify-web-api-java:8.0.0"

    testImplementation "org.spockframework:spock-core:2.4-M1-groovy-4.0"
}


compileJava {
    options.fork = true

    for (final javacPackage in ['code', 'util']) {

        /*  Adapted from https://github.com/projectlombok/lombok/issues/2681#issuecomment-805252645
        */
        options.forkOptions.jvmArgs += ['--add-opens', "jdk.compiler/com.sun.tools.javac.${javacPackage}=ALL-UNNAMED"
                as String] // GString not supported as JVM fork argument

        options.compilerArgs += ['--add-exports', "jdk.compiler/com.sun.tools.javac.${javacPackage}=ALL-UNNAMED"]
    }
}


test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}


/*
run {
    environment "PATH", String.join(File.pathSeparator, [

            "C:\\Miniconda3\\envs\\netemu",
            "C:\\Miniconda3\\envs\\netemu\\Library\\mingw-w64\\bin",
            "C:\\Miniconda3\\envs\\netemu\\Library\\usr\\bin",
            "C:\\Miniconda3\\envs\\netemu\\Library\\bin",
            "C:\\Miniconda3\\envs\\netemu\\Scripts",

            jepDir,
            System.getenv('PATH')])

    environment "PYTHONPATH", [
            "c:\\tools\\miniconda3\\envs\\yang\\python", "-c", "print(__import__('os').pathsep.join(__import__('sys').path).strip(__import__('os').pathsep))"

    ].execute().text.trim()
}
*/


jar {
    manifest {
        attributes 'Main-Class': "com.adva.netemu.example.jukebox.Main"
    }
}

tasks.register 'uberJar', Jar, {
    with jar
    archiveClassifier.set 'uber'

    manifest {
        attributes 'Main-Class': "com.adva.netemu.example.jukebox.Main"
    }

    /*  The following extended archive creation is adapted from
        https://github.com/gradle/gradle/blob/31c1c031de1643402032e1a51f835c2055d0afb5
                /subprojects/docs/src/samples/userguide/files/archivesWithJavaPlugin/kotlin/build.gradle.kts
    */

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.filter { File file -> file.name.endsWith ".jar" }.collect { zipTree it }
    }
}
