    public static class ListKey extends {{{yangClass}}}Key {

        private ListKey(@Nonnull final {{{keyClass}}} key) {
            super(key);
        }

        private ListKey(@Nonnull final {{{yangClass}}}Key key) {
            super(key);
        }

        @Nonnull
        public static ListKey from(@Nonnull final {{{keyClass}}} key) {
            return new ListKey(key);
        }

        @Nonnull
        public static ListKey from(@Nonnull final {{{yangClass}}}Key key) {
            return new ListKey(key);
        }
    }

    @Nonnull
    public static
    StreamEx<{{{class}}}{{{bindingClassSuffix}}}> bindingStreamOf(@Nonnull final Collection<? extends {{{class}}}> objects) {
        return StreamEx.of(objects).map({{{class}}}{{{utilityClassSuffix}}}::bindingOf).filter(Optional::isPresent)
                .map(Optional::get);
    }

    @Nonnull
    public static StreamEx<{{{yangClass}}}> streamConfigurationDataFrom(@Nonnull final Collection<? extends {{{class}}}> objects) {

        return streamConfigurationDataFrom(objects.stream());
    }

    @Nonnull
    public static StreamEx<{{{yangClass}}}> streamConfigurationDataFrom(@Nonnull final Stream<? extends {{{class}}}> objects) {

        return StreamEx.of(objects).map({{{class}}}{{{utilityClassSuffix}}}::configurationDataFrom).filter(Data::isPresent)
                .map(Data::get);
    }

    @Nonnull
    public static List<{{{yangClass}}}> listConfigurationDataFrom(@Nonnull final Collection<? extends {{{class}}}> objects) {

        return streamConfigurationDataFrom(objects).toImmutableList();
    }

    @Nonnull
    public static List<{{{yangClass}}}> listConfigurationDataFrom(@Nonnull final Stream<? extends {{{class}}}> objects) {

        return streamConfigurationDataFrom(objects).toImmutableList();
    }

    @Nonnull
    public static EntryStream<{{{yangClass}}}Key, {{{yangClass}}}> entryStreamConfigurationDataFrom(
            @Nonnull final Collection<? extends {{{class}}}> objects) {

        return streamConfigurationDataFrom(objects).mapToEntry(item -> item.key(), Function.identity());
    }

    @Nonnull
    public static EntryStream<{{{yangClass}}}Key, {{{yangClass}}}> entryStreamConfigurationDataFrom(
            @Nonnull final Stream<? extends {{{class}}}> objects) {

        return streamConfigurationDataFrom(objects).mapToEntry(item -> item.key(), Function.identity());
    }

    @Nonnull
    public static Map<{{{yangClass}}}Key, {{{yangClass}}}> mapConfigurationDataFrom(
            @Nonnull final Collection<? extends {{{class}}}> objects) {

        return streamConfigurationDataFrom(objects).toMap(item -> item.key(), Function.identity());
    }

    @Nonnull
    public static Map<{{{yangClass}}}Key, {{{yangClass}}}> mapConfigurationDataFrom(
            @Nonnull final Stream<? extends {{{class}}}> objects) {

        return streamConfigurationDataFrom(objects).toMap(item -> item.key(), Function.identity());
    }

    @Nonnull
    public static StreamEx<{{{yangClass}}}> streamOperationalDataFrom(@Nonnull final Collection<? extends {{{class}}}> objects) {

        return streamOperationalDataFrom(objects.stream());
    }

    @Nonnull
    public static StreamEx<{{{yangClass}}}> streamOperationalDataFrom(@Nonnull final Stream<? extends {{{class}}}> objects) {

        return StreamEx.of(objects).map({{{class}}}{{{utilityClassSuffix}}}::operationalDataFrom).filter(Data::isPresent)
                .map(Data::get);
    }

    @Nonnull
    public static List<{{{yangClass}}}> listOperationalDataFrom(@Nonnull final Collection<? extends {{{class}}}> objects) {

        return streamOperationalDataFrom(objects).toImmutableList();
    }

    @Nonnull
    public static List<{{{yangClass}}}> listOperationalDataFrom(@Nonnull final Stream<? extends {{{class}}}> objects) {

        return streamOperationalDataFrom(objects).toImmutableList();
    }

    @Nonnull
    public static EntryStream<{{{yangClass}}}Key, {{{yangClass}}}> entryStreamOperationalDataFrom(
            @Nonnull final Collection<? extends {{{class}}}> objects) {

        return streamOperationalDataFrom(objects).mapToEntry(item -> item.key(), Function.identity());
    }

    @Nonnull
    public static EntryStream<{{{yangClass}}}Key, {{{yangClass}}}> entryStreamOperationalDataFrom(
            @Nonnull final Stream<? extends {{{class}}}> objects) {

        return streamOperationalDataFrom(objects).mapToEntry(item -> item.key(), Function.identity());
    }

    @Nonnull
    public static Map<{{{yangClass}}}Key, {{{yangClass}}}> mapOperationalDataFrom(
            @Nonnull final Collection<? extends {{{class}}}> objects) {

        return streamOperationalDataFrom(objects).toMap(item -> item.key(), Function.identity());
    }

    @Nonnull
    public static Map<{{{yangClass}}}Key, {{{yangClass}}}> mapStreamOperationalDataFrom(
            @Nonnull final Stream<? extends {{{class}}}> objects) {

        return streamOperationalDataFrom(objects).toMap(item -> item.key(), Function.identity());
    }
