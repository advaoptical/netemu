package {{{package}}};

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.Optional;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.function.BiFunction;
import java.util.function.BooleanSupplier;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.stream.Stream;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import one.util.streamex.StreamEx;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.opendaylight.yangtools.yang.binding.Augmentation;
import org.opendaylight.yangtools.yang.binding.DataObject;

import com.adva.netemu.YangBinding;

import {{{yangPackage}}}.{{{yangClass}}};
import {{{yangPackage}}}.{{{yangClass}}}Builder;

{{#block "extended imports"}}
{{/block}}

import com.adva.netemu.YangData;


public class {{{class}}}{{{utilityClassSuffix}}} {{{utilityClassBase}}} {

    @Nonnull
    private static final Logger LOG = LoggerFactory.getLogger({{{class}}}{{{utilityClassSuffix}}}.class);

{{#*inline "yangData"}}
    public static final class {{{yangName}}}Data extends YangData<{{{yangClass}}}> {

        @Nonnull
        private static final {{{yangName}}}Data EMPTY = new {{{yangName}}}Data(null);

        private {{{yangName}}}Data(@Nullable final {{{yangClass}}} object) {
            super(object);
        }

        @Nonnull
        public static {{{yangName}}}Data of(@Nonnull final {{{yangClass}}} object) {
            return new {{{yangName}}}Data(Objects.requireNonNull(object, () -> String.format(
                    "Missing YANG DataObject for instantiation of %s", {{{yangName}}}Data.class)));
        }

        @Nonnull
        public static {{{yangName}}}Data ofNullable(@Nullable final {{{yangClass}}} object) {
            return new {{{yangName}}}Data(object);
        }

        @Nonnull
        public static {{{yangName}}}Data from(@Nonnull final YangData<{{{yangClass}}}> data) {
            return new {{{yangName}}}Data(data.orElse(null));
        }

        @Nonnull
        public static {{{yangName}}}Data from(
                @Nonnull final org.opendaylight.yangtools.concepts.Builder<{{{yangClass}}}> builder) {

            return new {{{yangName}}}Data(builder.build());
        }

        @Nonnull
        public static {{{yangName}}}Data empty() {
            return EMPTY;
        }

{{#each yangDataGetters}}
    {{#if this.valueIsList}}
        {{#if this.valueHasBuilder}}
            {{> yangData yangClass=this.valueClass yangName=@key yangDataGetters=this.builderClassYangDataGetters}}

        @Nonnull
        public Optional<List<{{{@key}}}Data>> get{{{@key}}}() {
            return super.map({{{yangClass}}}::get{{{@key}}}).map(items -> StreamEx.of(items
            {{#if this.valueIsMap}}
                    .values()

            {{/if}}).map({{{@key}}}Data::of).toImmutableList());
        }

        @Nonnull
        public List<{{{@key}}}Data> list{{{@key}}}() {
            return this.get{{{@key}}}().orElseGet(() -> List.of());
        }

        @Nonnull
        public StreamEx<{{{@key}}}Data> stream{{{@key}}}() {
            return StreamEx.of(this.list{{{@key}}}());
        }

        {{else}}

        @Nonnull
        public Optional<List<{{{this.valueClass}}}>> get{{{@key}}}() {
            return super.map({{{yangClass}}}::get{{{@key}}})
        {{#if this.valueIsMap}}
                .map(items -> List.copyOf(items.values()))
        {{/if}};
        }

        @Nonnull
        public List<{{{this.valueClass}}}> list{{{@key}}}() {
            return this.get{{{@key}}}().orElseGet(() -> List.of());
        }

        @Nonnull
        public StreamEx<{{{this.valueClass}}}> stream{{{@key}}}() {
            return StreamEx.of(this.list{{{@key}}}());
        }

        /*
        @Nonnull
        public Optional<{{{this.valueClass}}}> find{{{@key}}}(@Nonnull final Object key) {
            return this.stream{{{@key}}}().findFirst(value -> (value != null) && value.key().equals(key));
        }

        @Nonnull
        public {{{this.valueClass}}} require{{{@key}}}(@Nonnull final Object key) {
            return this.stream{{{@key}}}().findFirst(value -> (value != null) && value.key().equals(key)).orElseThrow(() ->
                    new NoSuchElementException(String.format("Missing YANG {{{@key}}} leaf list item with key %s in %s",
                            key, this.object)));
        }
        */

        {{/if}}

    {{else}}
        {{#if this.valueHasBuilder}}
            {{> yangData yangClass=this.valueClass yangName=@key yangDataGetters=this.builderClassYangDataGetters}}

        @Nonnull
        public YangData<{{{this.valueClass}}}> get{{{@key}}}() {
            return super.map({{{yangClass}}}::{{{this.getterName}}}).map(YangData::of).orElseGet(() -> YangData.empty());
        }
        {{else}}

        @Nonnull
        public Optional<{{{this.valueClass}}}> get{{{@key}}}() {
            return super.map({{{yangClass}}}::{{{this.getterName}}});
        }

        @Nonnull
        public {{{this.valueClass}}} require{{{@key}}}() {
            return this.get{{{@key}}}().orElseThrow(() -> new NoSuchElementException(String.format(
                    "Missing or empty YANG {{{@key}}} leaf in %s", this.object)));
        }

        {{/if}}
    {{/if}}
{{/each}}
    }
{{/inline}}

{{> yangData}}

{{#*inline "yangBuilder"}}
    public static final class {{{builderName}}} implements org.opendaylight.yangtools.concepts.Builder<{{{yangClass}}}> {

        @Nonnull
        private final Map<Class<? extends Augmentation<{{{yangClass}}}>>, Augmentation<{{{yangClass}}}>> augmentations
                = new HashMap<>();

        @Nonnull
        public <A extends Augmentation<{{{yangClass}}}>> // & DataObject>
        {{{builderName}}} addAugmentation(@Nonnull final A augmentation) {
            this.augmentations.put(
                    (Class<? extends Augmentation<{{{yangClass}}}>>) augmentation.implementedInterface(), augmentation);

            return this;
        }

        @Nonnull
        public <A extends Augmentation<{{{yangClass}}}>> // & DataObject>
        {{{builderName}}} addAugmentation(@Nonnull final org.opendaylight.yangtools.concepts.Builder<A> augmentationBuilder) {
            return this.addAugmentation(augmentationBuilder.build());
        }

{{#each yangDataGetters}}
    {{#if this.valueIsList}}
        @Nullable
        private CompletableFuture<List<{{{this.valueClass}}}>> future{{{@key}}} = null;

        @Nonnull
        public {{{../builderName}}} set{{{@key}}}(@Nullable final Collection<{{{this.valueClass}}}> values) {
            this.future{{{@key}}} = (values != null) ? CompletableFuture.completedFuture(List.copyOf(values)) : null;
            return this;
        }

        @Nonnull
        public {{{../builderName}}} set{{{@key}}}(@Nonnull final {{{this.valueClass}}} ...values) {
            this.future{{{@key}}} = CompletableFuture.completedFuture(StreamEx.of(values).toImmutableList());
            return this;
        }

        @Nonnull
        public {{{../builderName}}} set{{{@key}}}(@Nonnull final Stream<{{{this.valueClass}}}> values) {
            this.future{{{@key}}} = CompletableFuture.completedFuture(StreamEx.of(values).toImmutableList());
            return this;
        }

        @Nonnull
        public {{{../builderName}}} set{{{@key}}}(@Nonnull final Optional<? extends Collection<{{{this.valueClass}}}>> values) {
            this.future{{{@key}}} = values.map(List::copyOf).map(CompletableFuture::completedFuture).orElse(null);
            return this;
        }

        @Nonnull
        public {{{../builderName}}} set{{{@key}}}(
                @Nonnull final CompletableFuture<? extends Collection<{{{this.valueClass}}}>> futureValues) {

            this.future{{{@key}}} = futureValues.thenApply(List::copyOf);
            return this;
        }

    {{else}}
        @Nullable
        private CompletableFuture<{{{this.valueClass}}}> future{{{@key}}} = null;

        @Nonnull
        public {{{../builderName}}} set{{{@key}}}(@Nullable final {{{this.valueClass}}} value) {
            this.future{{{@key}}} = (value != null) ? CompletableFuture.completedFuture(value) : null;
            return this;
        }

        @Nonnull
        public {{{../builderName}}} set{{{@key}}}(@Nonnull final Optional<{{{this.valueClass}}}> value) {
            this.future{{{@key}}} = value.isPresent() ? CompletableFuture.completedFuture(value.get()) : null;
            return this;
        }

        @Nonnull
        public {{{../builderName}}} set{{{@key}}}(@Nonnull final CompletableFuture<{{{this.valueClass}}}> futureValue) {
            this.future{{{@key}}} = futureValue;
            return this;
        }

        {{#if this.valueIsEnum}}
        @Nonnull
        public {{{../builderName}}} set{{{@key}}}(@Nonnull final String value) {
            this.future{{{@key}}} = {{{this.valueClass}}}.forName(value).map(CompletableFuture::completedFuture).orElseThrow(() ->
                    new IllegalArgumentException(value));

            return this;
        }

            {{#each this.enumConstants}}
        @Nonnull
        public {{{../../builderName}}} set{{{../@key}}}_{{{this}}}() {
            return this.set{{{../@key}}}({{{../this.valueClass}}}.{{{this}}});
        }

        @Nonnull
        public {{{../../builderName}}} set{{{../@key}}}_{{{this}}}_if(@Nonnull final BooleanSupplier condition) {
            if (condition.getAsBoolean()) {
                this.set{{{../@key}}}({{{../this.valueClass}}}.{{{this}}});
            }

            return this;
        }
            {{/each}}

        {{/if}}
    {{/if}}

    {{#if this.valueHasBuilder}}

        {{> yangBuilder yangClass=this.valueClass builderName=this.builderName yangDataGetters=this.builderClassYangDataGetters}}

        {{#if this.valueIsList}}
        @Nonnull @SafeVarargs
        public final {{{../builderName}}} set{{{@key}}}(
                @Nonnull final Function<{{{builderName}}}, {{{builderName}}}> ...providers) {

            this.future{{{@key}}} = CompletableFuture.completedFuture(StreamEx.of(providers)
                    .map(provider -> provider.apply(new {{{builderName}}}()).build())
                    .toImmutableList());

            return this;
        }

        @Nonnull
        public final <T> {{{../builderName}}} set{{{@key}}}(
                @Nonnull final Collection<T> arguments,
                @Nonnull final BiFunction<T, {{{builderName}}}, {{{builderName}}}> provider) {

            return this.set{{{@key}}}(arguments.stream(), provider);
        }

        @Nonnull
        public final <T> {{{../builderName}}} set{{{@key}}}(
                @Nonnull final Stream<T> arguments,
                @Nonnull final BiFunction<T, {{{builderName}}}, {{{builderName}}}> provider) {

            this.future{{{@key}}} = CompletableFuture.completedFuture(StreamEx.of(arguments)
                    .map(argument -> provider.apply(argument, new {{{builderName}}}()).build())
                    .toImmutableList());

            return this;
        }

        {{else}}
        @Nonnull
        public {{{../builderName}}} set{{{@key}}}(@Nonnull final Function<{{{builderName}}}, {{{builderName}}}> provider) {
            this.future{{{@key}}} = CompletableFuture.completedFuture(provider.apply(new {{{builderName}}}()).build());
            return this;
        }

        @Nonnull
        public {{{../builderName}}} set{{{@key}}}(@Nonnull final YangData<{{{this.valueClass}}}> value) {
            this.future{{{@key}}} = value.isPresent() ? CompletableFuture.completedFuture(value.get()) : null;
            return this;
        }

        {{/if}}
    {{/if}}
{{/each}}

        @Nonnull @Override
        public {{{yangClass}}} build() {
            @Nonnull final var builder = new {{{yangClass}}}Builder();

{{#unless yangDataGetters.empty}}
            try {
    {{#each yangDataGetters}}
                builder.set{{{@key}}}((this.future{{{@key}}} != null) ? this.future{{{@key}}}.get() : null);
    {{/each}}

            } catch (final ExecutionException | InterruptedException e) {
                throw new RuntimeException(e);
            }
{{/unless}}

            for (@Nonnull final var augmentation : this.augmentations.entrySet()) {
                builder.addAugmentation(augmentation.getKey(), augmentation.getValue());
            }

            return builder.build();
        }
    }
{{/inline}}

{{> yangBuilder}}

    @Nonnull
    public static Optional<{{{class}}}{{{bindingClassSuffix}}}> bindingOf(@Nonnull final {{{class}}} object) {
        return object.{{{bindingGetter}}}().map({{{class}}}{{{bindingClassSuffix}}}.class::cast);
    }

{{#each yangDataGetters}}
    {{#if this.valueHasBuilder}}
        {{#if this.valueIsList}}

    public static final class {{{@key}}}Binding extends YangBinding.ChildListBinding<{{{this.valueClass}}}, {{{this.valueClass}}}Key, Builder.{{{@key}}}Builder> {

        private {{{@key}}}Binding(@Nonnull final {{{class}}} parent, @Nonnull final {{{this.valueClass}}}Key listKey) {
            super({{{this.valueClass}}}.class, {{{this.valueClass}}}Key.class, Builder.{{{@key}}}Builder.class,
                    parent.requireYang{{{bindingType}}}Binding(),
                    listKey);
        }

        @Nonnull
        public {{{@key}}}Binding appliesConfigurationDataUsing(@Nonnull final Consumer<Data.{{{@key}}}Data> applier) {
            super.setConfigurationDataApplier((applier != null) ? (@Nonnull final YangData<{{{this.valueClass}}}> data) -> {
                if (data.isPresent()) {
                    applier.accept(Data.{{{@key}}}Data.of(data.get()));
                }

            } : null);

            return this;
        }

        @Nonnull
        public {{{@key}}}Binding appliesOperationalDataUsing(@Nonnull final Consumer<Data.{{{@key}}}Data> applier) {
            super.setOperationalDataApplier((applier != null) ? (@Nonnull final YangData<{{{this.valueClass}}}> data) -> {
                if (data.isPresent()) {
                    applier.accept(Data.{{{@key}}}Data.of(data.get()));
                }

            } : null);

            return this;
        }

        @Nonnull
        public {{{@key}}}Binding providesConfigurationDataUsing(
                @Nonnull final Function<Builder.{{{@key}}}Builder, Builder.{{{@key}}}Builder> provider) {

            super.setConfigurationDataProvider(provider);
            return this;
        }

        @Nonnull
        public {{{@key}}}Binding providesConfigurationDataUsingFuture(
                @Nonnull final Function<Builder.{{{@key}}}Builder, CompletableFuture<Builder.{{{@key}}}Builder>> provider) {

            return this.providesConfigurationDataUsing(builder -> {
                try {
                    return provider.apply(builder).get();

                } catch (final ExecutionException | InterruptedException e) {
                    throw new RuntimeException(e);
                }
            });
        }

        @Nonnull
        public {{{@key}}}Binding providesOperationalDataUsing(
                @Nonnull final Function<Builder.{{{@key}}}Builder, Builder.{{{@key}}}Builder> provider) {

            super.setOperationalDataProvider(provider);
            return this;
        }

        @Nonnull
        public {{{@key}}}Binding providesOperationalDataUsingFuture(
                @Nonnull final Function<Builder.{{{@key}}}Builder, CompletableFuture<Builder.{{{@key}}}Builder>> provider) {

            return this.providesOperationalDataUsing(builder -> {
                try {
                    return provider.apply(builder).get();

                } catch (final ExecutionException | InterruptedException e) {
                    throw new RuntimeException(e);
                }
            });
        }
    }

    @Nonnull
    public static {{{@key}}}Binding create{{{@key}}}BindingFor(
            @Nonnull final {{{class}}} parent,
            @Nonnull final {{{this.valueClass}}}Key listKey) {

        return new {{{@key}}}Binding(parent, listKey);
    }

        {{else}}

    public static final class {{{@key}}}Binding extends YangBinding.ChildBinding<{{{this.valueClass}}}, Builder.{{{@key}}}Builder> {

        private {{{@key}}}Binding(@Nonnull final {{{class}}} parent) {
            super({{{this.valueClass}}}.class, Builder.{{{@key}}}Builder.class, parent.requireYang{{{bindingType}}}Binding());
        }

        @Nonnull
        public {{{@key}}}Binding appliesConfigurationDataUsing(@Nonnull final Consumer<Data.{{{@key}}}Data> applier) {
            super.setConfigurationDataApplier((applier != null) ? (@Nonnull final YangData<{{{this.valueClass}}}> data) -> {
                if (data.isPresent()) {
                    applier.accept(Data.{{{@key}}}Data.of(data.get()));
                }

            } : null);

            return this;
        }

        @Nonnull
        public {{{@key}}}Binding appliesOperationalDataUsing(@Nonnull final Consumer<Data.{{{@key}}}Data> applier) {
            super.setOperationalDataApplier((applier != null) ? (@Nonnull final YangData<{{{this.valueClass}}}> data) -> {
                if (data.isPresent()) {
                    applier.accept(Data.{{{@key}}}Data.of(data.get()));
                }

            } : null);

            return this;
        }

        @Nonnull
        public {{{@key}}}Binding providesConfigurationDataUsing(
                @Nonnull final Function<Builder.{{{@key}}}Builder, Builder.{{{@key}}}Builder> provider) {

            super.setConfigurationDataProvider(provider);
            return this;
        }

        @Nonnull
        public {{{@key}}}Binding providesConfigurationDataUsingFuture(
                @Nonnull final Function<Builder.{{{@key}}}Builder, CompletableFuture<Builder.{{{@key}}}Builder>> provider) {

            return this.providesConfigurationDataUsing(builder -> {
                try {
                    return provider.apply(builder).get();

                } catch (final ExecutionException | InterruptedException e) {
                    throw new RuntimeException(e);
                }
            });
        }

        @Nonnull
        public {{{@key}}}Binding providesOperationalDataUsing(
                @Nonnull final Function<Builder.{{{@key}}}Builder, Builder.{{{@key}}}Builder> provider) {

            super.setOperationalDataProvider(provider);
            return this;
        }

        @Nonnull
        public {{{@key}}}Binding providesOperationalDataUsingFuture(
                @Nonnull final Function<Builder.{{{@key}}}Builder, CompletableFuture<Builder.{{{@key}}}Builder>> provider) {

            return this.providesOperationalDataUsing(builder -> {
                try {
                    return provider.apply(builder).get();

                } catch (final ExecutionException | InterruptedException e) {
                    throw new RuntimeException(e);
                }
            });
        }
    }

    @Nonnull
    public static {{{@key}}}Binding create{{{@key}}}BindingFor(@Nonnull final {{{class}}} parent) {
        return new {{{@key}}}Binding(parent);
    }

        {{/if}}
    {{/if}}
{{/each}}

    /*
    @Nonnull
    public static Data configurationDataFrom(@Nonnull final {{{class}}} object) {
        @Nullable final var data = bindingOf(object).map({{{class}}}{{{bindingClassSuffix}}}::provideConfigurationData)
                .orElse(null);

        return (data != null) ? Data.of(data) : Data.empty();
    }
    */

    @Nonnull
    public static Data configurationDataFrom(@Nonnull final {{{class}}} object) {
        @Nullable final var dataFuture = bindingOf(object).map({{{class}}}{{{bindingClassSuffix}}}::provideConfigurationData);
        if (dataFuture.isPresent()) {
            @Nonnull final YangData<{{{yangClass}}}> data;
            try {
                data = dataFuture.get().get();

            } catch (final InterruptedException | ExecutionException e) {
                throw new RuntimeException(e.getCause());
            }

            if (data.isPresent()) {
                return Data.of(data.get());
            }
        }

        return Data.empty();
    }

    @Nonnull
    public static Data operationalDataFrom(@Nonnull final {{{class}}} object) {
        @Nullable final var dataFuture = bindingOf(object).map({{{class}}}{{{bindingClassSuffix}}}::provideOperationalData);
        if (dataFuture.isPresent()) {
            @Nonnull final YangData<{{{yangClass}}}> data;
            try {
                data = dataFuture.get().get();

            } catch (final InterruptedException | ExecutionException e) {
                throw new RuntimeException(e.getCause());
            }

            if (data.isPresent()) {
                return Data.of(data.get());
            }
        }

        return Data.empty();
    }

{{#block "extended members"}}
{{/block}}
}
