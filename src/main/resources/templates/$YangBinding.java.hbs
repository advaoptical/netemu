package {{package}};

import java.util.function.Consumer;
import java.util.function.Function;

import javax.annotation.Nonnull;

import {{yangPackage}}.{{yangClass}};
import {{yangPackage}}.{{yangClass}}Builder;

import com.adva.netemu.YangBinding;
import com.adva.netemu.YangData;
import com.adva.netemu.{{providerAnnotation}};


@{{providerAnnotation}}(
        origin = {{class}}.class,
        value = {{yangClass}}.class,
        builder = {{yangClass}}Builder.class

{{~#if pythonizerClass}},
        pythonizer = {{pythonizerClass}}.class
{{~/if}})

public class {{class}}{{bindingClassSuffix}} extends YangBinding<{{yangClass}}, {{class}}{{utilityClassSuffix}}.Builder> {

    @Nonnull
    public {{class}}{{bindingClassSuffix}} appliesConfigurationDataUsing(
            @Nonnull final Consumer<{{class}}{{utilityClassSuffix}}.Data> applier) {

        super.setConfigurationDataApplier((applier != null) ? (@Nonnull final YangData<{{yangClass}}> data) -> {
            if (data.isPresent()) {
                applier.accept({{class}}{{utilityClassSuffix}}.Data.of(data.get()));
            }

        } : null);

        return this;
    }

    @Nonnull
    public {{class}}{{bindingClassSuffix}} appliesOperationalDataUsing(
            @Nonnull final Consumer<{{class}}{{utilityClassSuffix}}.Data> applier) {

        super.setOperationalDataApplier((applier != null) ? (@Nonnull final YangData<{{yangClass}}> data) -> {
            if (data.isPresent()) {
                applier.accept({{class}}{{utilityClassSuffix}}.Data.of(data.get()));
            }

        } : null);

        return this;
    }

    @Nonnull
    public {{class}}{{bindingClassSuffix}} providesOperationalDataUsing(
            @Nonnull final Function<{{class}}{{utilityClassSuffix}}.Builder, {{class}}{{utilityClassSuffix}}.Builder> provider) {

        super.setOperationalDataProvider(provider);
        return this;
    }
}
