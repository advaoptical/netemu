package {{package}};

import java.util.function.Consumer;
import java.util.function.Function;

import javax.annotation.Nonnull;

import {{yangPackage}}.{{yangClass}};
import {{yangPackage}}.{{yangClass}}Builder;

import com.adva.netemu.YangBinding;
import com.adva.netemu.YangData;
import com.adva.netemu.{{providerAnnotation}};


@{{providerAnnotation}}(origin = {{class}}.class, value = {{yangClass}}.class, builder = {{yangClass}}Builder.class)
public class {{class}}{{bindingClassSuffix}} extends YangBinding<{{yangClass}}, {{yangClass}}Builder> {

    public {{class}}{{bindingClassSuffix}} appliesConfigurationDataUsing(
            @Nonnull final {{class}}.YangBindingConnector connector,
            @Nonnull final Consumer<{{class}}{{utilityClassSuffix}}.Data> applier) {

        super.appliesConfigurationDataUsing((applier != null) ? (@Nonnull final YangData<{{yangClass}}> data) -> {
            if (data.isPresent()) {
                applier.accept({{class}}{{utilityClassSuffix}}.Data.of(data.get()));
            }

        } : null);

        return this;
    }

    public {{class}}{{bindingClassSuffix}} appliesOperationalDataUsing(
            @Nonnull final {{class}}.YangBindingConnector connector,
            @Nonnull final Consumer<{{class}}{{utilityClassSuffix}}.Data> applier) {

        super.appliesOperationalDataUsing((applier != null) ? (@Nonnull final YangData<{{yangClass}}> data) -> {
            if (data.isPresent()) {
                applier.accept({{class}}{{utilityClassSuffix}}.Data.of(data.get()));
            }

        } : null);

        return this;
    }

    public {{class}}{{bindingClassSuffix}} providesOperationalDataUsing(
            @Nonnull final {{class}}.YangBindingConnector connector,
            @Nonnull final Function<{{yangClass}}Builder, {{yangClass}}Builder> provider) {

        super.providesOperationalDataUsing(provider);
        return this;
    }
}
