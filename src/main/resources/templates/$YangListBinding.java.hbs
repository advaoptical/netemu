package {{package}};

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.function.Consumer;
import java.util.function.Function;

import javax.annotation.Nonnull;

import {{yangPackage}}.{{yangClass}};
import {{yangPackage}}.{{yangClass}}Builder;
import {{yangPackage}}.{{yangClass}}Key;

import com.adva.netemu.YangData;
import com.adva.netemu.YangListBinding;
import com.adva.netemu.{{providerAnnotation}};


@{{providerAnnotation}}(
        origin = {{class}}.class,
        value = {{yangClass}}.class,
        key = {{yangClass}}Key.class,
        builder = {{yangClass}}Builder.class

{{~#if pythonizerClass}},
        pythonizer = {{pythonizerClass}}.class
{{~/if}})

public class {{class}}{{bindingClassSuffix}}
        extends YangListBinding<{{yangClass}}, {{yangClass}}Key, {{class}}{{utilityClassSuffix}}.Builder> {

    @Nonnull
    private final {{class}}{{utilityClassSuffix}}.ListKey key;

    @Nonnull @Override
    public {{yangClass}}Key getKey() {
        return this.key;
    }

    private {{class}}{{bindingClassSuffix}} (@Nonnull final {{class}}{{utilityClassSuffix}}.ListKey key) {
        this.key = key;
    }

    @Nonnull
    public static {{class}}{{bindingClassSuffix}} withKey(@Nonnull final {{class}}{{utilityClassSuffix}}.ListKey key) {
        return new {{class}}{{bindingClassSuffix}}(key);
    }

    @Nonnull
    public {{class}}{{bindingClassSuffix}} appliesConfigurationDataUsing(
            @Nonnull final Consumer<{{class}}{{utilityClassSuffix}}.Data> applier) {

        super.setConfigurationDataApplier((applier != null) ? (@Nonnull final YangData<{{yangClass}}> data) -> {
            if (data.isPresent()) {
                applier.accept({{class}}{{utilityClassSuffix}}.Data.of(data.get()));
            }

        } : null);

        return this;
    }

    @Nonnull
    public {{class}}{{bindingClassSuffix}} appliesOperationalDataUsing(
            @Nonnull final Consumer<{{class}}{{utilityClassSuffix}}.Data> applier) {

        super.setOperationalDataApplier((applier != null) ? (@Nonnull final YangData<{{yangClass}}> data) -> {
            if (data.isPresent()) {
                applier.accept({{class}}{{utilityClassSuffix}}.Data.of(data.get()));
            }

        } : null);

        return this;
    }

    @Nonnull
    public {{class}}{{bindingClassSuffix}} providesOperationalDataUsing(
            @Nonnull final Function<{{class}}{{utilityClassSuffix}}.Builder, {{class}}{{utilityClassSuffix}}.Builder> provider) {

        super.setOperationalDataProvider(provider);
        return this;
    }

    @Nonnull
    public {{class}}{{bindingClassSuffix}} providesOperationalDataUsingFuture(
            @Nonnull final Function<
                    {{class}}{{utilityClassSuffix}}.Builder, CompletableFuture<{{class}}{{utilityClassSuffix}}.Builder>>

            provider) {

        return this.providesOperationalDataUsing(builder -> {
            try {
                return provider.apply(builder).get();

            } catch (final ExecutionException | InterruptedException e) {
                throw new RuntimeException(e);
            }
        });
    }
}
