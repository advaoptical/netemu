    @Nonnull
    private final AtomicReference<Data> config = new AtomicReference<>(Data.empty());

    @Nonnull
    public Data config() {
        return this.config.get();
    }

    @Nonnull
    private final AtomicReference<Data> data = new AtomicReference<>(Data.empty());

    @Nonnull
    public Data data() {
        return this.data.get();
    }

    @Nonnull
    public CompletableFuture<Boolean> awaitOperationalDataApplying() {
        return this.yangBinding.awaitOperationalDataApplying();
    }

    @Nonnull
    private final AtomicReference<EmuDriver> driverSession = new AtomicReference<>(null);

    public void attachTo(@Nonnull final EmuDriver session) {
        this.driverSession.set(session);
    }

    @Nonnull
    private final ListeningExecutorService executor = MoreExecutors.listeningDecorator(new ScheduledThreadPoolExecutor(0));

    @Nonnull @SuppressWarnings({"UnstableApiUsage"})
    public FluentFuture<Data> update() {
        @Nullable final var session = this.driverSession.get();
        if (session != null) {
            return session.fetchOperationalData().transform(commitInfos -> {
                try {
                    this.yangBinding.provideOperationalData().get();

                } catch (final InterruptedException | ExecutionException e) {
                    throw new RuntimeException(e.getCause());
                }

                LOG.info("Exposing updated OPERATIONAL Data");
                return this.data.get();

            }, this.executor);
        }

        return FluentFuture.from(Futures.immediateFuture(this.data.get()));
    }

{{~#each yangDataGetters}}
    {{#if this.valueIsList}}
        {{#if this.valueHasBuilder}}

    @Nonnull
    public Optional<List<Data.{{{@key}}}Data>> get{{{@key}}}() {
        return this.data.get().get{{{@key}}}();
    }

    @Nonnull
    public StreamEx<Data.{{{@key}}}Data> stream{{{@key}}}() {
        return StreamEx.of(this.get{{{@key}}}().orElse(List.of()));
    }

    @Nonnull
    public List<Data.{{{@key}}}Data> list{{{@key}}}() {
        return this.stream{{{@key}}}().toImmutableList();
    }

    @Nonnull
    public FluentFuture<Optional<List<Data.{{{@key}}}Data>>> update{{{@key}}}() {
        return this.update().transform(Data::get{{{@key}}}, this.executor);
    }

        {{else}}

    @Nonnull
    public Optional<List<{{{this.valueClass}}}>> get{{{@key}}}() {
        return this.data.get().get{{{@key}}}();
    }

    @Nonnull
    public StreamEx<{{{this.valueClass}}}> stream{{{@key}}}() {
        return StreamEx.of(this.get{{{@key}}}().orElse(List.of()));
    }

    @Nonnull
    public List<{{{this.valueClass}}}> list{{{@key}}}() {
        return this.stream{{{@key}}}().toImmutableList();
    }

    @Nonnull
    public FluentFuture<Optional<List<{{{this.valueClass}}}>>> update{{{@key}}}() {
        return this.update().transform(Data::get{{{@key}}}, this.executor);
    }

        {{/if}}

    protected void set{{{@key}}}(@Nullable final Collection<{{{this.valueClass}}}> value) {
        this.data.set(Data.of(new {{{yangClass}}}Builder(this.data.get().get()).set{{{@key}}}(List.copyOf(value)).build()));
    }

    protected void set{{{@key}}}(@Nullable final Stream<{{{this.valueClass}}}> value) {
        this.data.set(Data.of(new {{{yangClass}}}Builder(this.data.get().get())
                .set{{{@key}}}(StreamEx.of(value).toImmutableList())
                .build()));
    }

    {{else}}
        {{#if this.valueHasBuilder}}

    @Nonnull
    public YangData<{{{this.valueClass}}}> get{{{@key}}}() {
        return this.data.get().get{{{@key}}}().or(() -> this.config.get().get{{{@key}}}());
    }

    @Nonnull
    public FluentFuture<YangData<{{{this.valueClass}}}>> update{{{@key}}}() {
        return this.update().transform(Data::get{{{@key}}}, this.executor);
    }

        {{else}}

    @Nonnull
    public Optional<{{{this.valueClass}}}> get{{{@key}}}() {
        return this.data.get().get{{{@key}}}().or(() -> this.config.get().get{{{@key}}}());
    }

    @Nonnull
    public FluentFuture<Optional<{{{this.valueClass}}}>> update{{{@key}}}() {
        return this.update().transform(Data::get{{{@key}}}, this.executor);
    }

        {{/if}}

    protected void set{{{@key}}}(@Nullable final {{{this.valueClass}}} value) {
        this.data.set(Data.of(new {{{yangClass}}}Builder(this.data.get().get()).set{{{@key}}}(value).build()));
    }

    {{/if}}
{{~/each}}
