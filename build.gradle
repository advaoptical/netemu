import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform


plugins {
    id 'groovy'
    id 'java'
    id 'java-library'
    id 'java-gradle-plugin'
    id 'maven-publish'
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'


group = "com.adva"
version = "0.1.0-SNAPSHOT"

sourceCompatibility = 17
targetCompatibility = 17


final def operatingSystem = DefaultNativePlatform.currentOperatingSystem

/*
ext.jepDir = [
        "python", "-c", "print(__import__('os').path.dirname(__import__('importlib.util').util.find_spec('jep').origin))"

].execute().text.trim()
*/


repositories {
    mavenLocal()
    mavenCentral()
    // maven("https://repo.spring.io/plugins-release")

    // jcenter()

    /*
    flatDir {
        dirs "opendaylight-mdsal/binding/yang-binding/target"
    }
    */

    /*
    flatDir {
        dirs "opendaylight-netconf/netconf/tools/netconf-testtool/target"
    }
    */

    /*
    flatDir {
        dirs jepDir
    }
    */
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()

    implementation 'io.github.classgraph:classgraph:4.8.154'
    // implementation 'org.reflections:reflections:0.10.2'

    implementation 'javax.activation:activation:1.1.1'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    /*  Can't use jaxb-runtime 3.x versions before finding a compatible jaxb-api. In combination w/the above, 3.x leads to:
        javax.xml.bind.JAXBException: Implementation of JAXB-API has not been found on module path or classpath.
     */
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.7'

    /*  Can't use jersey 3.x versions because of incompatibility w/org.opendaylight.netconf:restconf-nb-rfc8040 due to
        conflicting javax.ws.rs dependencies.
     */
    implementation 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.38'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.38'
    // implementation "org.glassfish.jersey.Model:jersey-Model-sse:3.0.0"

    implementation 'com.github.jknack:handlebars:4.3.1'
    implementation 'com.google.auto.service:auto-service:1.0.1'
    implementation 'com.google.dagger:dagger:2.44.2'
    implementation 'com.squareup:javapoet:1.13.0'
    implementation 'com.squareup.inject:assisted-inject-annotations-dagger2:0.8.1'

    annotationProcessor 'com.google.auto.service:auto-service:1.0.1'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.44.2'
    annotationProcessor 'com.squareup.inject:assisted-inject-processor-dagger2:0.8.1'

    api "javax.xml:jsr173:1.0"
    // api "com.bea.xml:jsr173-ri:1.0"
    // api "com.ea.async:ea-async:1.2.3"
    api "net.javacrumbs.future-converter:future-converter-java8-guava:1.2.0"
    api "net.jodah:typetools:0.6.3"
    api 'one.util:streamex:0.8.1'

    // To avoid java.lang.NoClassDefFoundError: org/glassfish/jersey/server/model/Parameter$Source
    // when using com.adva.netemu.northbound.RestconfService in derived projects
    // api "org.glassfish.jersey.core:jersey-common:2.32"

    // api 'io.jooby:jooby-netty:2.16.1'
    // annotationProcessor 'io.jooby:jooby-apt:2.16.1'

    // Needed by auto-generated MD-SAL Java code from YANG
    api 'com.google.code.findbugs:findbugs-annotations:3.0.1'
    api 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.2.700'

    api 'org.opendaylight.yangtools:rfc7952-data-util:9.0.5_1-ADVA'
    api 'org.opendaylight.yangtools:yang-data-api:9.0.5_1-ADVA'
    api 'org.opendaylight.yangtools:yang-data-codec-gson:9.0.5_1-ADVA'
    api 'org.opendaylight.yangtools:yang-data-codec-xml:9.0.5_1-ADVA'
    api 'org.opendaylight.yangtools:yang-data-impl:9.0.5_1-ADVA'
    api 'org.opendaylight.yangtools:yang-data-util:9.0.5_1-ADVA'
    api 'org.opendaylight.yangtools:yang-maven-plugin:9.0.5_1-ADVA'

    // api 'org.opendaylight.mdsal:maven-sal-api-gen-plugin:10.0.5'
    api 'org.opendaylight.mdsal:mdsal-binding-dom-adapter:10.0.5_1-ADVA'
    api 'org.opendaylight.mdsal:mdsal-binding-dom-codec:10.0.5_1-ADVA'
    api 'org.opendaylight.mdsal:mdsal-binding-java-api-generator:10.0.5_1-ADVA'
    api 'org.opendaylight.mdsal:mdsal-dom-inmemory-datastore:10.0.5_1-ADVA'
    api 'org.opendaylight.mdsal:yang-binding:10.0.5_1-ADVA'

    // From ./opendaylight-mdsal/binding/yang-binding/target/
    // implementation ":yang-binding-3.0.3"

    api 'org.opendaylight.netconf:netconf-client:4.0.4_1-ADVA'
    api 'org.opendaylight.netconf:netconf-netty-util:4.0.4_1-ADVA'
    api 'org.opendaylight.netconf:netconf-testtool:4.0.4_1-ADVA'
    api 'org.opendaylight.netconf:restconf-nb:4.0.4_1-ADVA'

    // implementation ":netconf-testtool-1.7.0-executable"

    // api "black.ninia:jep:3.9.0"

    // implementation "commons-io:commons-io:2.6"
    // testImplementation "junit", "junit", "4.12"
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}


compileJava {
    options.fork = true

    for (final javacPackage in ['code', 'util']) {

        /*  Adapted from https://github.com/projectlombok/lombok/issues/2681#issuecomment-805252645
        */
        options.forkOptions.jvmArgs += ['--add-opens', "jdk.compiler/com.sun.tools.javac.${javacPackage}=ALL-UNNAMED"
                as String] // GString not supported as JVM fork argument

        options.compilerArgs += ['--add-exports', "jdk.compiler/com.sun.tools.javac.${javacPackage}=ALL-UNNAMED"]
    }
}


tasks.register 'mvnInstallYangtools', Exec, {
    workingDir rootDir
    commandLine = (operatingSystem.windows ? ["cmd", "/c"] : []) + [
            "groovy", "mvn-yangtools.groovy", "--projects=-karaf", "install", "-DskipTests",
            "-Dmaven.javadoc.skip=true", "-Dcheckstyle.skip=true", "-Dspotbugs.skip=true"]
}

tasks.register 'mvnInstallMdsal', Exec, {
    dependsOn mvnInstallYangtools

    workingDir rootDir
    commandLine = (operatingSystem.windows ? ["cmd", "/c"] : []) + [
            "groovy", "mvn-mdsal.groovy", "install", "-DskipTests",
            "-Dmaven.javadoc.skip=true", "-Dcheckstyle.skip=true", "-Dspotbugs.skip=true"]
}

tasks.register 'mvnInstallNetconf', Exec, {
    dependsOn mvnInstallYangtools
    dependsOn mvnInstallMdsal

    workingDir rootDir
    commandLine = (operatingSystem.windows ? ["cmd", "/c"] : []) + [
            "groovy", "mvn-netconf.groovy", "install", "-DskipTests",
            "-Dmaven.javadoc.skip=true", "-Dcheckstyle.skip=true", "-Dspotbugs.skip=true"]
}

tasks.register 'mvnInstallOpenDaylightModules', {
    dependsOn mvnInstallYangtools
    dependsOn mvnInstallMdsal
    dependsOn mvnInstallNetconf
}


gradlePlugin {
    plugins {
        netEmuPlugin {
            id = "com.adva.netemu"
            implementationClass = "com.adva.netemu.gradle.NetEmuPlugin"
        }
    }
}
