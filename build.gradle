import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform


plugins {
    id 'groovy'
    id 'java'
    id 'java-library'
    id 'java-gradle-plugin'
    id 'maven-publish'

    alias libs.plugins.git.version // id 'com.palantir.git-version' version '3.0.0'

    // id 'com.vaadin'
    // id 'io.spring.dependency-management' version '1.1.0'
}


group = "com.adva"

version = { com.palantir.gradle.gitversion.VersionDetails details ->

    if (details.branchName && !(details.branchName as String).blank && details.branchName != 'master') {
        return "${details.branchName.replaceAll '/', '-'}-g${details.gitHash}"
    }

    final matcher = details.lastTag =~ /^v?(?<major>\d+)\.(?<minor>\d+)(\.(?<micro>\d+))?$/
    if (!matcher) { // ==> tag does not represent a version number ...
        return "${details.lastTag}-g${details.gitHash}"
    }

    final majorNumber = (matcher.group 'major') as Integer
    final minorNumber = (matcher.group 'minor') as Integer
    final microNumber = (matcher.group 'micro') as Integer

    final version
    final publishingProperty /// used for configuring deployment -- see: com.adtran.topline.java-conventions.gradle & CI config
    if (details.commitDistance > 0) {
        /// ==> not on tagged commit ...

        /// suffixes after -SHAPSHOT don't work with https://muc-artifactory.rd.advaoptical.com/artifactory/at-snapshot-local
        version = "${majorNumber}.${minorNumber}.${microNumber + 1}-SNAPSHOT" // -${details.commitDistance}"
        publishingProperty = 'snapshot'

    } else {
        version = "${majorNumber}.${minorNumber}.${microNumber}"
        publishingProperty = 'release'
    }

    project.ext[publishingProperty] = version
    return version

}(project.versionDetails()) /// Provided by com.palantir.git-version plugin

projectDir.toPath() resolve 'testemu' resolve 'gradle.properties' toFile() setText "netEmuVersion = ${project.version}"


java { /** Updated to use JavaPluginExtension instead of Gradle 8+ deprecated JavaPluginConvention - according to:

    https://docs.gradle.org/8.4/userguide/upgrading_version_8.html#java_convention_deprecation
    */

    sourceCompatibility = 17
    targetCompatibility = 17
}


final operatingSystem = DefaultNativePlatform.currentOperatingSystem

/*
ext.jepDir = [
"python", "-c", "print(__import__('os').path.dirname(__import__('importlib.util').util.find_spec('jep').origin))"

].execute().text.trim()
*/


repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url = 'https://vaadin.com/nexus/content/repositories/vaadin-addons'
    }

    // maven("https://repo.spring.io/plugins-release")

    // jcenter()

    /*
    flatDir {
        dirs "opendaylight-mdsal/binding/yang-binding/target"
    }
    */

    /*
    flatDir {
        dirs "opendaylight-netconf/netconf/tools/netconf-testtool/target"
    }
    */

    /*
    flatDir {
        dirs jepDir
    }
    */
}

/*
dependencyManagement {
    imports {
        mavenBom "com.vaadin:vaadin-bom:${project.vaadinVersion}"
    }
}
*/

configurations.all { // Exclude transitive dependencies not available anymore and/or superceded by other modules ...

    exclude group: 'com.bea.xml', module: 'jsr173-ri' // Superceded by javax.xml:jsr173
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    // implementation 'org.apache.groovy:groovy:4.0.17'

    api libs.vaadin // "com.vaadin:vaadin-core:${project.property 'vaadinVersion'}"

    implementation libs.classgraph // 'io.github.classgraph:classgraph:4.8.154'
    // implementation 'org.reflections:reflections:0.10.2'

    implementation libs.activation // 'javax.activation:activation:1.1.1'
    implementation libs.jaxb.api // 'javax.xml.bind:jaxb-api:2.3.1'

    /*  Can't use jaxb-runtime 3.x versions before finding a compatible jaxb-api. In combination w/the above, 3.x leads to:
        javax.xml.bind.JAXBException: Implementation of JAXB-API has not been found on module path or classpath.
     */
    implementation libs.jaxb.runtime // 'org.glassfish.jaxb:jaxb-runtime:2.3.7'

    /*  Can't use jersey 3.x versions because of incompatibility w/org.opendaylight.netconf:restconf-nb-rfc8040 due to
        conflicting javax.ws.rs dependencies.
     */
    implementation libs.jersey.grizzly2 // 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.38'
    implementation libs.jersey.hk2 // 'org.glassfish.jersey.inject:jersey-hk2:2.38'
    // implementation "org.glassfish.jersey.Model:jersey-Model-sse:3.0.0"

    implementation libs.handlebars // 'com.github.jknack:handlebars:4.3.1'
    implementation libs.auto.service // 'com.google.auto.service:auto-service:1.0.1'
    implementation libs.dagger.api // 'com.google.dagger:dagger:2.44.2'
    implementation libs.poet // 'com.squareup:javapoet:1.13.0'
    implementation libs.assisted.inject.annotations // 'com.squareup.inject:assisted-inject-annotations-dagger2:0.8.1'

    annotationProcessor libs.auto.service // 'com.google.auto.service:auto-service:1.0.1'
    annotationProcessor libs.dagger.compiler // 'com.google.dagger:dagger-compiler:2.44.2'
    annotationProcessor libs.assisted.inject.processor // 'com.squareup.inject:assisted-inject-processor-dagger2:0.8.1'

    annotationProcessor libs.lombok // 'org.projectlombok:lombok:1.18.24'
    compileOnly libs.lombok // 'org.projectlombok:lombok:1.18.24'

    api libs.jsr173 // "javax.xml:jsr173:1.0"
    // api "com.bea.xml:jsr173-ri:1.0"
    // api "com.ea.async:ea-async:1.2.3"
    api libs.future.converter // "net.javacrumbs.future-converter:future-converter-java8-guava:1.2.0"
    api libs.typetools // "net.jodah:typetools:0.6.3"
    api libs.streamex // 'one.util:streamex:0.8.1'

    // To avoid java.lang.NoClassDefFoundError: org/glassfish/jersey/server/model/Parameter$Source
    // when using com.adva.netemu.northbound.RestconfService in derived projects
    // api "org.glassfish.jersey.core:jersey-common:2.32"

    // api 'io.jooby:jooby-netty:2.16.1'
    // annotationProcessor 'io.jooby:jooby-apt:2.16.1'

    // Needed by auto-generated MD-SAL Java code from YANG modules
    api libs.findbugs // 'com.google.code.findbugs:findbugs-annotations:3.0.1'
    api libs.eclipse.annotation // 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.2.700'

    /*  Add all transitive dependencies of customized OpenDaylight modules, so their *-ADVA releases can be bundled with NETEMU --
        except when Gradle task :dependencies in executed, since its used to determine those transitive dependencies ...

        (The check for executed task was adapted from https://discuss.gradle.org/t/how-to-get-current-tasks-info/24997/2)
    */
    if ('dependencies' !in project.gradle.startParameter.taskNames) {

        // File is auto-created using ./opendaylight-dependencies.groovy
        for (final line in (file 'opendaylight-dependencies.txt' readLines())) {
            final dependency = line.trim(); if (dependency) {
                api dependency
            }
        }
    }

    /*  And now define the customized OpenDaylight modules as mere compile dependencies, so during compilation & runtime of
        NETEMU-dependent projects, those modules are not searched for in Maven repositories, but their contents (classes, etc.)
        are simply accessed through NETEMU's own JAR (see :jar task configuration for details on bundling) ...
    */

    compileOnly libs.rfc7952.data.util // 'org.opendaylight.yangtools:rfc7952-data-util:9.0.5_1-ADVA'
    compileOnly libs.yang.data.api // 'org.opendaylight.yangtools:yang-data-api:9.0.5_1-ADVA'
    compileOnly libs.yang.data.codec.gson // 'org.opendaylight.yangtools:yang-data-codec-gson:9.0.5_1-ADVA'
    compileOnly libs.yang.data.codec.xml // 'org.opendaylight.yangtools:yang-data-codec-xml:9.0.5_1-ADVA'
    compileOnly libs.yang.data.impl // 'org.opendaylight.yangtools:yang-data-impl:9.0.5_1-ADVA'
    compileOnly libs.yang.data.util // 'org.opendaylight.yangtools:yang-data-util:9.0.5_1-ADVA'
    compileOnly libs.yang.maven.plugin // 'org.opendaylight.yangtools:yang-maven-plugin:9.0.5_1-ADVA'

    // api 'org.opendaylight.mdsal:maven-sal-api-gen-plugin:10.0.5'
    compileOnly libs.binding.dom.adapter // 'org.opendaylight.mdsal:mdsal-binding-dom-adapter:10.0.5_1-ADVA'
    compileOnly libs.binding.dom.codec // 'org.opendaylight.mdsal:mdsal-binding-dom-codec:10.0.5_1-ADVA'
    compileOnly libs.binding.java.api.generator // 'org.opendaylight.mdsal:mdsal-binding-java-api-generator:10.0.5_1-ADVA'
    compileOnly libs.dom.inmemory.datastore // 'org.opendaylight.mdsal:mdsal-dom-inmemory-datastore:10.0.5_1-ADVA'
    compileOnly libs.yang.binding // 'org.opendaylight.mdsal:yang-binding:10.0.5_1-ADVA'

    // From ./opendaylight-mdsal/binding/yang-binding/target/
    // implementation ":yang-binding-3.0.3"

    compileOnly libs.client // 'org.opendaylight.netconf:netconf-client:4.0.4_1-ADVA'
    compileOnly libs.netty.util // 'org.opendaylight.netconf:netconf-netty-util:4.0.4_1-ADVA'
    compileOnly libs.testtool // 'org.opendaylight.netconf:netconf-testtool:4.0.4_1-ADVA'
    compileOnly libs.restconf.nb // 'org.opendaylight.netconf:restconf-nb:4.0.4_1-ADVA'

    // implementation ":netconf-testtool-1.7.0-executable"

    // api "black.ninia:jep:3.9.0"

    // implementation "commons-io:commons-io:2.6"
    // testImplementation "junit", "junit", "4.12"

    // testImplementation 'org.apache.groovy:groovy:4.0.17'
    testImplementation libs.spock // 'org.spockframework:spock-core:2.4-M1-groovy-3.0'
}

jar { // Bundle NETEMU's JAR with customized OpenDaylight modules -- technique adapted from https://stackoverflow.com/a/66910803
    from {
        configurations.compileClasspath.findAll { it.name.endsWith '-ADVA.jar' } collect { zipTree it }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven { /* URL selection strategy adapted from
        https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:snapshot_and_release_repositories
        */
            if (project.hasProperty 'release') {
                url = project.findProperty 'artifactoryReleaseUrl'
            }

            if (project.hasProperty 'snapshot') {
                url = project.findProperty 'artifactorySnapshotUrl'
            }

            if (project.hasProperty 'artifactoryToken') {
                credentials {
                    username = project.findProperty 'artifactoryUser'
                    password = project.findProperty 'artifactoryToken'
                }
            }
        }
    }
}


compileJava {
    options.fork = true

    for (final javacPackage in ['code', 'util']) {

        /*  Adapted from https://github.com/projectlombok/lombok/issues/2681#issuecomment-805252645
        */
        options.forkOptions.jvmArgs += ['--add-opens', "jdk.compiler/com.sun.tools.javac.${javacPackage}=ALL-UNNAMED"
                as String] // GString not supported as JVM fork argument

        options.compilerArgs += ['--add-exports', "jdk.compiler/com.sun.tools.javac.${javacPackage}=ALL-UNNAMED"]
    }
}


test {
    useJUnitPlatform()
}


tasks.register 'mvnInstallYangtools', Exec, {
    workingDir rootDir
    commandLine = (operatingSystem.windows ? ["cmd", "/c"] : []) + [
            "groovy", "mvn-yangtools.groovy", "--batch-mode", "--projects=-karaf", "install", "-DskipTests",
            "-Dmaven.javadoc.skip=true", "-Dcheckstyle.skip=true", "-Dspotbugs.skip=true"]
}

tasks.register 'mvnInstallMdsal', Exec, {
    dependsOn mvnInstallYangtools

    workingDir rootDir
    commandLine = (operatingSystem.windows ? ["cmd", "/c"] : []) + [
            "groovy", "mvn-mdsal.groovy", "--batch-mode", "install", "-DskipTests",
            "-Dmaven.javadoc.skip=true", "-Dcheckstyle.skip=true", "-Dspotbugs.skip=true"]
}

tasks.register 'mvnInstallNetconf', Exec, {
    dependsOn mvnInstallYangtools
    dependsOn mvnInstallMdsal

    workingDir rootDir
    commandLine = (operatingSystem.windows ? ["cmd", "/c"] : []) + [
            "groovy", "mvn-netconf.groovy", "--batch-mode", "install", "-DskipTests",
            "-Dmaven.javadoc.skip=true", "-Dcheckstyle.skip=true", "-Dspotbugs.skip=true"]
}

tasks.register 'mvnInstallOpenDaylightModules', {
    dependsOn mvnInstallYangtools
    dependsOn mvnInstallMdsal
    dependsOn mvnInstallNetconf
}


tasks.register 'mvnCleanYangtools', Exec, {
    workingDir rootDir
    commandLine = (operatingSystem.windows ? ["cmd", "/c"] : []) + ["groovy", "mvn-yangtools.groovy", "--batch-mode", "clean"]
}

tasks.register 'mvnCleanMdsal', Exec, {
    workingDir rootDir
    commandLine = (operatingSystem.windows ? ["cmd", "/c"] : []) + ["groovy", "mvn-mdsal.groovy", "--batch-mode", "clean"]
}

tasks.register 'mvnCleanNetconf', Exec, {
    workingDir rootDir
    commandLine = (operatingSystem.windows ? ["cmd", "/c"] : []) + ["groovy", "mvn-netconf.groovy", "--batch-mode", "clean"]
}

tasks.register 'mvnCleanOpenDaylightModules', {
    dependsOn mvnCleanYangtools
    dependsOn mvnCleanMdsal
    dependsOn mvnCleanNetconf
}


gradlePlugin {
    plugins {
        netEmuPlugin {
            id = "com.adva.netemu"
            implementationClass = "com.adva.netemu.gradle.NetEmuPlugin"
        }
    }
}
