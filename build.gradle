plugins {
    id 'groovy'
    id 'java'
    id 'java-library'
    id 'java-gradle-plugin'
    id 'maven-publish'

    alias libs.plugins.git.version
    alias libs.plugins.versions

    // id 'com.vaadin'
    // id 'io.spring.dependency-management' version '1.1.0'
}

wrapper {
    gradleVersion = '8.7'
}


group = 'com.adva'

version = { com.palantir.gradle.gitversion.VersionDetails details ->

    if (details.branchName && !(details.branchName as String).blank && details.branchName != 'master') {
        return "${details.branchName.replaceAll '/', '-'}-g${details.gitHash}"
    }

    final matcher = details.lastTag =~ /^v?(?<major>\d+)\.(?<minor>\d+)(\.(?<micro>\d+))?$/
    if (!matcher) { // ==> tag does not represent a version number ...
        return "${details.lastTag}-g${details.gitHash}"
    }

    final majorNumber = (matcher.group 'major') as Integer
    final minorNumber = (matcher.group 'minor') as Integer
    final microNumber = (matcher.group 'micro') as Integer

    final version
    final publishingProperty /// used for configuring deployment -- see: com.adtran.topline.java-conventions.gradle & CI config
    if (details.commitDistance > 0) {
        /// ==> not on tagged commit ...

        /// suffixes after -SHAPSHOT don't work with https://muc-artifactory.rd.advaoptical.com/artifactory/at-snapshot-local
        version = "${majorNumber}.${minorNumber}.${microNumber + 1}-SNAPSHOT" // -${details.commitDistance}"
        publishingProperty = 'snapshot'

    } else {
        version = "${majorNumber}.${minorNumber}.${microNumber}"
        publishingProperty = 'release'
    }

    project.ext[publishingProperty] = version
    return version

}(project.versionDetails()) /// Provided by com.palantir.git-version plugin

projectDir.toPath() resolve 'testemu' resolve 'gradle.properties' toFile() setText """
# Please do not commit this file. It is auto-(re)generated by every ../build.gradle execution

netEmuVersion = ${project.version}
"""


java { /** Updated to use JavaPluginExtension instead of Gradle 8+ deprecated JavaPluginConvention - according to:

    https://docs.gradle.org/8.4/userguide/upgrading_version_8.html#java_convention_deprecation
    */

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}


import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

final operatingSystem = DefaultNativePlatform.currentOperatingSystem

/*
ext.jepDir = [
"python", "-c", "print(__import__('os').path.dirname(__import__('importlib.util').util.find_spec('jep').origin))"

].execute().text.trim()
*/


repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url = 'https://vaadin.com/nexus/content/repositories/vaadin-addons'
    }

    // maven("https://repo.spring.io/plugins-release")

    // jcenter()

    /*
    flatDir {
        dirs "opendaylight-mdsal/binding/yang-binding/target"
    }
    */

    /*
    flatDir {
        dirs "opendaylight-netconf/netconf/tools/netconf-testtool/target"
    }
    */

    /*
    flatDir {
        dirs jepDir
    }
    */
}

/*
dependencyManagement {
    imports {
        mavenBom "com.vaadin:vaadin-bom:${project.vaadinVersion}"
    }
}
*/

configurations.all { /// Exclude transitive dependencies not available anymore and/or superceded by other modules ...

    exclude group: 'com.bea.xml', module: 'jsr173-ri' /// Superceded by javax.xml:jsr173
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    // implementation 'org.apache.groovy:groovy:4.0.17'

    api libs.vaadin

    implementation libs.maven

    implementation libs.classgraph
    // implementation 'org.reflections:reflections:0.10.2'

    implementation libs.activation
    implementation libs.jaxb.api

    /** Can't use jaxb-runtime 3.x versions before finding a compatible jaxb-api. In combination w/the above, 3.x leads to:
        javax.xml.bind.JAXBException: Implementation of JAXB-API has not been found on module path or classpath.
    */
    implementation libs.jaxb.runtime

    /** Can't use jersey 3.x versions because of incompatibility w/org.opendaylight.netconf:restconf-nb-rfc8040 due to
        conflicting javax.ws.rs dependencies.
    */
    implementation libs.jersey.grizzly2
    implementation libs.jersey.hk2
    // implementation "org.glassfish.jersey.Model:jersey-Model-sse:3.0.0"

    implementation libs.handlebars
    implementation libs.auto.service
    implementation libs.dagger.api
    implementation libs.poet
    implementation libs.assisted.inject.annotations

    annotationProcessor libs.auto.service
    annotationProcessor libs.dagger.compiler
    annotationProcessor libs.assisted.inject.processor

    annotationProcessor libs.lombok
    compileOnly libs.lombok

    annotationProcessor libs.metainf.services
    compileOnly libs.metainf.services

    api libs.jsr173
    // api "com.bea.xml:jsr173-ri:1.0"
    // api "com.ea.async:ea-async:1.2.3"
    api libs.future.converter
    api libs.typetools
    api libs.streamex

    // To avoid java.lang.NoClassDefFoundError: org/glassfish/jersey/server/model/Parameter$Source
    // when using com.adva.netemu.northbound.RestconfService in derived projects
    // api "org.glassfish.jersey.core:jersey-common:2.32"

    // api 'io.jooby:jooby-netty:2.16.1'
    // annotationProcessor 'io.jooby:jooby-apt:2.16.1'

    /// Needed by auto-generated MD-SAL Java code from YANG modules
    api libs.findbugs
    api libs.eclipse.annotation

    /** Add all transitive dependencies of customized OpenDaylight modules, so their _#-ADVA releases can be bundled with NETEMU
        -- except when Gradle task :dependencies in executed, since its used to determine those transitive dependencies ...

        (The check for executed task was adapted from https://discuss.gradle.org/t/how-to-get-current-tasks-info/24997/2)
    */
    if ('dependencies' !in project.gradle.startParameter.taskNames) {

        /** Dependencies file should be re-created on every dependencies update, by runnging:
            groovy opendaylight-dependencies.groovy > openconfig-dependencies.txt
        */
        for (final dependency in (file 'opendaylight-dependencies.txt' readLines() collect { it.trim() } findAll { it })) {

            if (dependency =~ /org\.opendaylight\.(yangtools|mdsal|netconf):/) { compileOnly "${dependency}_1-ADVA" }
            else { api dependency }
        }
    }

    /** And now define the customized OpenDaylight modules as mere compile dependencies, so during compilation & runtime of
        NETEMU-dependent projects, those modules are not searched for in Maven repositories, but their contents (classes, etc.)
        are simply accessed through NETEMU's own JAR (see :jar task configuration for details on bundling) ...
    */

    /// opendaylight-yangtools ...
    compileOnly libs.rfc7952.data.util
    compileOnly libs.yang.data.api
    compileOnly libs.yang.data.codec.gson
    compileOnly libs.yang.data.codec.xml
    compileOnly libs.yang.data.impl
    compileOnly libs.yang.data.util
    compileOnly libs.yang.maven.plugin
    compileOnly libs.yang.repo.fs

    /// opendaylight-mdsal ...
    compileOnly libs.binding.dom.adapter
    compileOnly libs.binding.dom.codec
    compileOnly libs.binding.java.api.generator
    compileOnly libs.dom.inmemory.datastore
    compileOnly libs.yang.binding

    /// opendaylight-netconf ...
    compileOnly libs.client
    compileOnly libs.netty.util
    compileOnly libs.testtool
    compileOnly libs.restconf.nb

    // api "black.ninia:jep:3.9.0"

    testImplementation libs.spock // 'org.spockframework:spock-core:2.4-M1-groovy-3.0'
}

jar { /// Bundle NETEMU's JAR with customized OpenDaylight modules -- technique adapted from https://stackoverflow.com/a/66910803
    from {
        configurations.compileClasspath.findAll { it.name.endsWith '-ADVA.jar' } collect { zipTree it }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven { /** URL selection strategy adapted from
        https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:snapshot_and_release_repositories
        */
            if (project.hasProperty 'release') {
                url = project.findProperty 'artifactoryReleaseUrl'
            }

            if (project.hasProperty 'snapshot') {
                url = project.findProperty 'artifactorySnapshotUrl'
            }

            if (project.hasProperty 'artifactoryToken') {
                credentials {
                    username = project.findProperty 'artifactoryUser'
                    password = project.findProperty 'artifactoryToken'
                }
            }
        }
    }
}


compileJava {
    options.fork = true

    for (final javacPackage in ['code', 'util']) {

        /** Adapted from https://github.com/projectlombok/lombok/issues/2681#issuecomment-805252645
        */
        options.forkOptions.jvmArgs += ['--add-opens', "jdk.compiler/com.sun.tools.javac.${javacPackage}=ALL-UNNAMED"
                as String] /// GString not supported as JVM fork argument

        options.compilerArgs += ['--add-exports', "jdk.compiler/com.sun.tools.javac.${javacPackage}=ALL-UNNAMED"]
    }
}


test {
    useJUnitPlatform()
}


tasks.register 'mvnInstallYangtools', Exec, {
    workingDir rootDir
    commandLine = (operatingSystem.windows ? ['cmd', '/c'] : []) + [
            'groovy', 'mvn-yangtools.groovy', '--batch-mode', '--projects=-karaf', 'install', '-DskipTests',
            '-Dmaven.javadoc.skip=true', '-Dcheckstyle.skip=true', '-Dspotbugs.skip=true']
}

tasks.register 'mvnInstallMdsal', Exec, {
    dependsOn mvnInstallYangtools

    workingDir rootDir
    commandLine = (operatingSystem.windows ? ['cmd', '/c'] : []) + [
            'groovy', 'mvn-mdsal.groovy', '--batch-mode', 'install', '-DskipTests',
            '-Dmaven.javadoc.skip=true', '-Dcheckstyle.skip=true', '-Dspotbugs.skip=true']
}

tasks.register 'mvnInstallNetconf', Exec, {
    dependsOn mvnInstallYangtools
    dependsOn mvnInstallMdsal

    workingDir rootDir
    commandLine = (operatingSystem.windows ? ['cmd', '/c'] : []) + [
            'groovy', 'mvn-netconf.groovy', '--batch-mode', 'install', '-DskipTests',
            '-Dmaven.javadoc.skip=true', '-Dcheckstyle.skip=true', '-Dspotbugs.skip=true']
}

tasks.register 'mvnInstallOpenDaylightModules', {
    dependsOn mvnInstallYangtools
    dependsOn mvnInstallMdsal
    dependsOn mvnInstallNetconf
}


tasks.register 'mvnCleanYangtools', Exec, {
    workingDir rootDir
    commandLine = (operatingSystem.windows ? ['cmd', '/c'] : []) + ['groovy', 'mvn-yangtools.groovy', '--batch-mode', 'clean']
}

tasks.register 'mvnCleanMdsal', Exec, {
    workingDir rootDir
    commandLine = (operatingSystem.windows ? ['cmd', '/c'] : []) + ['groovy', 'mvn-mdsal.groovy', '--batch-mode', 'clean']
}

tasks.register 'mvnCleanNetconf', Exec, {
    workingDir rootDir
    commandLine = (operatingSystem.windows ? ['cmd', '/c'] : []) + ['groovy', 'mvn-netconf.groovy', '--batch-mode', 'clean']
}

tasks.register 'mvnCleanOpenDaylightModules', {
    dependsOn mvnCleanYangtools
    dependsOn mvnCleanMdsal
    dependsOn mvnCleanNetconf
}


tasks.register 'dockerBuildCiContainer', Exec, {
    workingDir project.rootDir
    commandLine = (operatingSystem.windows ? ['cmd', '/c'] : []) + [
            'docker', 'buildx', 'build', '--file', 'ci.Dockerfile', '--tag', 'adtran/netemu-ci:latest', '.']
}


gradlePlugin {
    plugins {
        netEmuPlugin {
            id = 'com.adva.netemu'
            implementationClass = 'com.adva.netemu.gradle.NetEmuPlugin'
        }
    }
}
